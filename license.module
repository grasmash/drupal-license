<?php

/**
 * @file
 * Contains license.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Access\AccessResult;

// License statuses.
define('LICENSE_CREATED', 0);
define('LICENSE_PENDING', 1);
define('LICENSE_ACTIVE', 2);
define('LICENSE_EXPIRED', 3);
define('LICENSE_SUSPENDED', 5);
define('LICENSE_REVOKED', 4);

/**
 * Implements hook_help().
 */
function license_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the license module.
    case 'help.page.license':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides license type, which may be used to control user access to other entities.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function license_theme() {
  $theme = [];
  $theme['license'] = array(
    'render element' => 'elements',
    'file' => 'license.page.inc',
    'template' => 'license',
  );
  $theme['license_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'license.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function license_theme_suggestions_license(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#license'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'license__' . $sanitized_view_mode;
  $suggestions[] = 'license__' . $entity->bundle();
  $suggestions[] = 'license__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'license__' . $entity->id();
  $suggestions[] = 'license__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_access();
 */
function license_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
//  switch($operation) {
//    case 'view':
//      $licenses = \Drupal::entityTypeManager()->getStorage('license')->loadByProperties(['uid' => $account->id(), 'plugin_id' => 'entity_access']);
//      foreach ($licenses as $license) {
//        /** @var \Drupal\Core\Plugin\ContextAwarePluginInterface $plugin */
//        $plugin = $license->getPlugin();
//        $plugin->setContext('license', $license);
//        if ($plugin->applies([$entity, $operation])) {
//          return $plugin->access([$entity, $operation]);
//        }
//      }
//  }

  switch ($operation) {
    case 'view':

      $control_access = FALSE;
      $license_types = \Drupal::entityTypeManager()->getStorage('license_type')->loadMultiple();
      foreach ($license_types as $license_type) {
        $target_entity_type = $license_type->get('target_entity_type');
        if ($entity->getEntityTypeId() == $target_entity_type) {
          $control_access = TRUE;
          break;
        }
      }

      if ($control_access) {
        $licenses = \Drupal::entityTypeManager()
          ->getStorage('license')
          ->loadByProperties(['user_id' => $account->id()]);
        /** @var \Drupal\Core\Entity\FieldableEntityInterface $license */
        foreach ($licenses as $license) {
          foreach ($license->get('licensed_entity') as $licensed_entity) {
            if ($licensed_entity->entity->id() == $entity->id()) {
              // if this doesn't work try $license->get('licensed_entity')->value() and possibly $license->get('licensed_entity')->value()->id().
              // Add cachebility.
              // Add check for isActive().
              $access = AccessResult::allowed();
              $access->addCacheTags([$license->getCacheTags()]);
              return $access;
            }
          }
        }
        // Add cachebility.
        $access = AccessResult::forbidden();
        $access->addCacheTags([$license->getCacheTags()]);
        return $access;
      }
  }

  return AccessResult::neutral();
}

// @todo Implement cron job to find active licenses after expiry date and change their status to expired.
